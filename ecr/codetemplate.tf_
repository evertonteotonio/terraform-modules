
resource "aws_iam_role" "build" {
  name               = "${local.name}-ecr-codebuild-role"
  assume_role_policy = "${data.aws_iam_policy_document.role.json}"
}

data "aws_iam_policy_document" "role" {
  statement {
    sid = ""

    actions = [
      "sts:AssumeRole",
    ]

    principals {
      type        = "Service"
      identifiers = ["codebuild.amazonaws.com"]
    }

    effect = "Allow"
  }
}

resource "aws_iam_policy" "build" {
  name   = "${local.name}-ecr-codebuild-policy"
  path   = "/service-role/"
  policy = "${data.aws_iam_policy_document.permissions.json}"
}

data "aws_iam_policy_document" "permissions" {
  statement {
    actions = [
      "s3:*"
    ],
    "resources" = [
      "${aws_s3_bucket.pipeline.arn}",
      "${aws_s3_bucket.pipeline.arn}/*"
    ]
  }
  statement {
    sid = ""

    actions = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "ssm:GetParameters",
    ]

    effect = "Allow"

    resources = [
      "*",
    ]
  }
}

resource "aws_iam_role_policy_attachment" "build" {
  policy_arn = "${aws_iam_policy.build.arn}"
  role       = "${aws_iam_role.build.id}"
}

resource "aws_codebuild_project" "main" {
  name         = "${local.name}-ecr"
  service_role = "${aws_iam_role.build.arn}"

  artifacts {
    type = "NO_ARTIFACTS"
  }

  environment {
    compute_type    = "${var.build_compute_type}"
    image           = "${var.build_image}"
    type            = "LINUX_CONTAINER"
    privileged_mode = false
  }

  source {
    type      = "GITHUB"
    location  = "https://github.com/${var.repo_owner}/${var.repo_name}.git"
    buildspec = <<EOF



EOF
  }

  tags = "${local.tags}"
}



resource "aws_s3_bucket" "pipeline" {
  bucket = "${local.name}-ecr-artifact-store"
  acl    = "private"
  tags   = "${local.tags}"
}

resource "aws_iam_role" "pipeline" {
  name               = "${local.name}-ecr-pipeline-role"
  assume_role_policy = "${data.aws_iam_policy_document.assume.json}"
}

data "aws_iam_policy_document" "assume" {
  statement {
    sid = ""

    actions = [
      "sts:AssumeRole",
    ]

    principals {
      type        = "Service"
      identifiers = ["codepipeline.amazonaws.com"]
    }

    effect = "Allow"
  }
}

resource "aws_iam_role_policy_attachment" "pipeline" {
  role       = "${aws_iam_role.pipeline.id}"
  policy_arn = "${aws_iam_policy.pipeline.arn}"
}

resource "aws_iam_policy" "pipeline" {
  name   = "${local.name}-ecr-codepipeline-policy"
  policy = "${data.aws_iam_policy_document.pipeline.json}"
}

data "aws_iam_policy_document" "pipeline" {
  statement {
    sid = ""

    actions = [
      "s3:*"
    ]

    resources = [
      "${aws_s3_bucket.pipeline.arn}",
      "${aws_s3_bucket.pipeline.arn}/*"
    ]
    effect    = "Allow"
  }
  statement {
    sid = ""

    actions = [
      "codebuild:BatchGetBuilds",
      "codebuild:StartBuild"
    ]

    resources = [
      "*"
    ]
    effect    = "Allow"
  }
}

resource "aws_codepipeline" "main" {
  # Elastic Beanstalk application name and environment name are specified
  name     = "${local.name}-ecr"
  role_arn = "${aws_iam_role.pipeline.arn}"

  artifact_store {
    location = "${aws_s3_bucket.pipeline.bucket}"
    type     = "S3"
  }

  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "ThirdParty"
      provider         = "GitHub"
      version          = "1"
      output_artifacts = ["code"]

      configuration {
        OAuthToken           = "${var.repo_token}"
        Owner                = "${var.repo_owner}"
        Repo                 = "${var.repo_name}"
        Branch               = "master"
      }
    }
  }

  stage {
    name = "Build"

    action {
      name     = "Build"
      category = "Build"
      owner    = "AWS"
      provider = "CodeBuild"
      version  = "1"

      input_artifacts  = ["code"]

      configuration {
        ProjectName = "${aws_codebuild_project.main.name}"
      }
    }
  }
}
